version: '3.8'

services:
  # Database service
  database:
    image: postgres:15-alpine
    container_name: llm-platform-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-llm_platform}
      POSTGRES_USER: ${POSTGRES_USER:-llm_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-llm_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - llm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-llm_user} -d ${POSTGRES_DB:-llm_platform}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: llm-platform-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - llm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: llm-platform-backend
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-llm_user}:${POSTGRES_PASSWORD:-llm_password}@database:5432/${POSTGRES_DB:-llm_platform}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - API_HOST=0.0.0.0
      - API_PORT=5000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./models:/app/models
      - ./datasets:/app/datasets
      - ./logs:/app/logs
    ports:
      - "${API_PORT:-8000}:5000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - llm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend web interface
  frontend:
    build:
      context: ./web_interface/frontend
      dockerfile: Dockerfile
    container_name: llm-platform-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:${API_PORT:-5000}/api/v1
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - llm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streamlit web interface (alternative to React)
  streamlit:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: llm-platform-streamlit
    command: ["streamlit", "run", "web_interface/app.py", "--server.port=8501", "--server.address=0.0.0.0"]
    environment:
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=false
      - DATABASE_URL=postgresql://${POSTGRES_USER:-llm_user}:${POSTGRES_PASSWORD:-llm_password}@database:5432/${POSTGRES_DB:-llm_platform}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./models:/app/models
      - ./datasets:/app/datasets
      - ./logs:/app/logs
    ports:
      - "${STREAMLIT_PORT:-8501}:8501"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - llm-network
    restart: unless-stopped
    profiles:
      - streamlit
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  llm-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local